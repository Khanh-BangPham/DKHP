package views.SinhVien;

import dao.CT_HocKy_NamHoc_DAO;
import dao.CT_NhomDAO;
import dao.DangKyDAO;
import dao.HocKyDAO;
import dao.LopTinChiDAO;

import dao.NamHocDAO;
import dao.PhienDAO;

import entity.CT_HocKy_NamHoc;
import entity.CT_Nhom;
import entity.DangKy;
import entity.HocKy;
import entity.LopTinChi;

import entity.NamHoc;
import entity.Phien;
import java.awt.Component;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;

import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;

import java.util.Set;

import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

import sqlserver_connection.ConnectionHelper;
import views.*;

public class DangKyLTC extends javax.swing.JPanel {

    /**
     * Creates new form DangKyMonHoc
     */
    private static DangNhap dangNhap;
    private List<String> monDangKy = new LinkedList<>();
    private Set<Integer> indexDangKy = new HashSet<>();

    int currentIDCTHKNH;
    int time;
    int id_hk;

    public DangKyLTC(DangNhap dangNhap) {
        initComponents();
        this.dangNhap = dangNhap;
//        if(getHKNHCurrent() != null)
//            currentIDCTHKNH = getHKNHCurrent().getId_cthknh();
//        else currentIDCTHKNH = 1;

        currentIDCTHKNH = getCurrentHKNH().getId_cthknh();
        time = getNextCurrentHKNH().getId_cthknh()==0?currentIDCTHKNH:getNextCurrentHKNH().getId_cthknh();
        id_hk = getNextCurrentHKNH().getMaHocKy()==0?getCurrentHKNH().getMaHocKy():getNextCurrentHKNH().getMaHocKy();
        
        initTable();
        loadData(time);
//        setCurrentHKNHComBo();
//        tbDSDK.setEnabled(false);
//        tbDSDaDK.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        btnLuu = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbDSDaDK = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbDSDK = new javax.swing.JTable();
        txtThongBao = new javax.swing.JLabel();

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", null, null, null, null, null, null, null, null},
                {"2", null, null, null, null, null, null, null, null},
                {"3", null, null, null, null, null, null, null, null},
                {"4", null, null, null, null, null, null, null, null},
                {"5", null, null, null, null, null, null, null, null},
                {"6", null, null, null, null, null, null, null, null},
                {"7", null, null, null, null, null, null, null, null},
                {"8", null, null, null, null, null, null, null, null},
                {"9", null, null, null, null, null, null, null, null},
                {"10", null, null, null, null, null, null, null, null}
            },
            new String [] {
                "STT", "Mã Môn", "Tên Môn", "STC", "Học Phí", "T/Gian BĐ", "T/Gian KT", "Trạng Thái", "Xoa"
            }
        ));
        jTable2.setShowGrid(true);
        jScrollPane2.setViewportView(jTable2);

        setPreferredSize(new java.awt.Dimension(802, 628));

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Danh Sách Môn Đăng Ký");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(284, 284, 284))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Danh Sách Môn Đã chọn");

        btnLuu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnLuu.setText("Lưu");
        btnLuu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLuuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(265, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(232, 232, 232)
                .addComponent(btnLuu, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel2)
                .addComponent(btnLuu, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tbDSDaDK.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Mã Môn", "Tên Môn", "Nhóm", "STC", "Học Phí", "T/Gian BĐ", "T/Gian KT", "Thu", "TietBD", "Phong", "Trạng Thái", "Xoa"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbDSDaDK.setRowHeight(50);
        tbDSDaDK.setShowGrid(true);
        tbDSDaDK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbDSDaDKMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tbDSDaDK);

        tbDSDK.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tbDSDK.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Mã Môn", "Tên Môn", "Nhóm", "STC", "Học Phí", "Số Lượng", "Còn Lại", "T/Gian BĐ", "T/Gian KT", "Thu", "TietBD", "Phòng", "Đăng ký"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbDSDK.setRowHeight(50);
        tbDSDK.setShowGrid(true);
        tbDSDK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbDSDKMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tbDSDK);

        txtThongBao.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtThongBao.setForeground(new java.awt.Color(255, 51, 51));
        txtThongBao.setText("Thông báo thời gian đăng ký môn bắt đầu từ:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane4)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtThongBao)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(txtThongBao)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    //Hien thi danh sach mon dang ky
    public void loadData(int id) {

        MultiLineTableCellRenderer renderer = new MultiLineTableCellRenderer();
        tbDSDK.setDefaultRenderer(Object.class, renderer);
        ConnectionHelper connectionHelper = new ConnectionHelper();
        DefaultTableModel model = (DefaultTableModel) tbDSDK.getModel();
        model.setRowCount(0);
        Connection connect = null;
        try {
            connect = connectionHelper.getConnection();
            String query = "{CALL DSLOP(?)}";
            CallableStatement stmt = connect.prepareCall(query);

            stmt.setInt(1, id);
            ResultSet result = stmt.executeQuery();
            String Thu;
            String tiet;
            int i = 1;
            while (result.next()) {

                String pTH = result.getString("PTH") == null ? "" : result.getString("PTH");
                String ngayBDTH = result.getString("NBDTH") == null ? "" : result.getString("NBDTH");
                String ngayKTTH = result.getString("NKTTH") == null ? "" : result.getString("NKTTH");
                if (result.getInt("ThuTH") != 0) {
                    Thu = Integer.toString(result.getInt("ThuLT")) + "\n\n" + Integer.toString(result.getInt("ThuTH"));
                } else {
                    Thu = Integer.toString(result.getInt("ThuLT"));
                }

                if (result.getInt("ThuTH") != 0) {
                    tiet = Integer.toString(result.getInt("TBDLT")) + "\n\n" + Integer.toString(result.getInt("TBDTH"));
                } else {
                    tiet = Integer.toString(result.getInt("TBDLT"));
                }

                Object[] obj = {i++, result.getString("MaMH"), result.getString("TenMH"), result.getInt("MaNhom"), result.getInt("SoTinChi"),
                    result.getInt("GiaTien") * result.getInt("SoTinChi"),
                    result.getInt("SoLuongTD"), result.getInt("SoLuongTD") - result.getInt("SoLuongDaDK"),
                    result.getString("NBDLT") + "\n" + ngayBDTH,
                    result.getString("NKTLT") + " \n" + ngayKTTH,
                    Thu,
                    tiet,
                    result.getString("PLT") + "\n\n" + pTH, false};

                model.addRow(obj);

            }
            stmt.close();
            connect.close();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        loadDSSVDK(id);
        thoiGianMoPhien(id);
        model.fireTableDataChanged();
    }

    //Chon mon dang ky
    private void tbDSDKMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbDSDKMouseClicked

        int index = tbDSDK.getSelectedRow();
        int col = tbDSDK.getSelectedColumn();
        if (checkTime() == false && col == 13) {
            tbDSDK.setValueAt(!(boolean) tbDSDK.getValueAt(index, 13), index, 13);
            JOptionPane.showMessageDialog(null, "Ngoài thời gian đăng ký");
            return;
        }

//        System.out.println(col + " " +getTongSoTinChi());
        DefaultTableModel model = (DefaultTableModel) tbDSDK.getModel();

        DefaultTableModel modelDaDK = (DefaultTableModel) tbDSDaDK.getModel();

        boolean dangKy = (boolean) model.getValueAt(index, 13);
        String maMH = model.getValueAt(index, 1).toString();

        if (dangKy && !monDangKy.contains(maMH)) {
            if ((int) tbDSDK.getValueAt(index, 7) < 1) {
                tbDSDK.setValueAt(!(boolean) tbDSDK.getValueAt(index, 13), index, 13);
                JOptionPane.showMessageDialog(null, "Hết số lượng");
                return;
            }
            String tenMH = model.getValueAt(index, 2).toString();
            int nhom = (int) (model.getValueAt(index, 3));
            int soTinChi = (int) (model.getValueAt(index, 4));
            int hocPhi = (int) model.getValueAt(index, 5);
            String ngayBD = model.getValueAt(index, 8).toString();
            String ngayKT = model.getValueAt(index, 9).toString();
            String thu = model.getValueAt(index, 10).toString();
            String tietBD = model.getValueAt(index, 11).toString();
            String phong = model.getValueAt(index, 12).toString();
            
            if (getTongSoTinChi() + (int) tbDSDK.getValueAt(index, 4) > 20 && (id_hk ==1 || id_hk == 2) && col == 13) {
                tbDSDK.setValueAt(!(boolean) tbDSDK.getValueAt(index, 13), index, 13);
                JOptionPane.showMessageDialog(null, "Qúa số tín chỉ quy định");
                return;
            }
            
            if (getTongSoTinChi() + (int) tbDSDK.getValueAt(index, 4) > 8 && (id_hk == 3) && col == 13) {
                tbDSDK.setValueAt(!(boolean) tbDSDK.getValueAt(index, 13), index, 13);
                JOptionPane.showMessageDialog(null, "Qúa số tín chỉ quy định");
                return;
            }
            
            
            if(checkTrungLich(Integer.parseInt(tietBD.split("\n")[0]), Integer.parseInt(thu.split("\n")[0]), ngayBD.split("\n")[0], ngayKT.split("\n")[0]) != -1){
                tbDSDK.setValueAt(!(boolean) tbDSDK.getValueAt(index, 13), index, 13);
                int ind = checkTrungLich(Integer.parseInt(tietBD.split("\n")[0]), Integer.parseInt(thu.split("\n")[0]), ngayBD.split("\n")[0], ngayKT.split("\n")[0]);
                String message = "Trùng lịch với: " + tbDSDaDK.getValueAt(ind, 2);
                JOptionPane.showMessageDialog(null, message);
                return;
            }
            monDangKy.add(maMH);
            indexDangKy.add(index);

            Object[] obj = {monDangKy.size(), maMH, tenMH, nhom, soTinChi, hocPhi, ngayBD, ngayKT, thu, tietBD, phong};

            modelDaDK.addRow(obj);
            tbDSDaDK.setValueAt("Chưa Lưu", monDangKy.indexOf(maMH), 11);

        } else if (dangKy == false && monDangKy.size() > 0 && indexDangKy.size() > 0 && monDangKy.contains(maMH) && indexDangKy.contains(index)) {

            if (checkDaLuu(monDangKy.indexOf(maMH))) {
                tbDSDK.setValueAt(!(boolean) tbDSDK.getValueAt(index, 13), index, 13);
                JOptionPane.showMessageDialog(null, "Đã Lưu CSDL không thể bỏ chọn");
                return;
            }
            modelDaDK.removeRow(monDangKy.indexOf(maMH));
            monDangKy.remove(maMH);
            indexDangKy.remove(index);
            for (int i = 0; i < tbDSDaDK.getRowCount(); i++) {
                tbDSDaDK.setValueAt(i + 1, i, 0);
            }

        } else if (dangKy && monDangKy.contains(maMH) && indexDangKy.contains(index) == false) {
            JOptionPane.showMessageDialog(null, "Đã chọn lớp cho môn này");
            model.setValueAt(false, index, 13);
        }

    }//GEN-LAST:event_tbDSDKMouseClicked

    //Luu danh sach dang ky
    private void btnLuuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLuuActionPerformed

        if (getTongSoTinChi() < 14 && (id_hk == 1 || id_hk == 2)) {
            JOptionPane.showMessageDialog(null, "Tổng sô tín chỉ ít nhất >= 14");
            return;
        }

        String maSV = dangNhap.getTaiKhoan();
        String maMH = "";
        int nhom;
        int tietBD;
        int thu;
        String ngayBD;
        String phong;

        DangKyDAO dangKyDao = new DangKyDAO();

        for (int i = 0; i < tbDSDaDK.getRowCount(); i++) {
            maMH = tbDSDaDK.getValueAt(i, 1).toString().strip();
            nhom = (int) tbDSDaDK.getValueAt(i, 3);
            tietBD = Integer.parseInt(tbDSDaDK.getValueAt(i, 9).toString().split("\n")[0]);
            thu = Integer.parseInt(tbDSDaDK.getValueAt(i, 8).toString().split("\n")[0]);
            ngayBD = tbDSDaDK.getValueAt(i, 6).toString().split("\n")[0];
            phong = tbDSDaDK.getValueAt(i, 10).toString().split("\n")[0];
//            System.out.println(this.time);
            dangKyDao.saveDangKy(maSV, maMH, nhom, tietBD, thu, ngayBD, phong, this.time);

        }
        JOptionPane.showMessageDialog(null, "Đã lưu cơ sơ dữ liệu thành công");

        loadData(time);
        setStateLuu();
    }//GEN-LAST:event_btnLuuActionPerformed

    private void tbDSDaDKMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbDSDaDKMouseClicked

        int index = tbDSDaDK.getSelectedRow();
        int col = tbDSDaDK.getSelectedColumn();
        if(checkTime()== false && col == 12){
            tbDSDaDK.setValueAt(!(boolean)tbDSDaDK.getValueAt(index, 12), index, 12);
            JOptionPane.showMessageDialog(null, "Ngoài thời gian đăng ký");
            return;
        }
//        System.out.println(time);
        if(getTongSoTinChi() - (int)tbDSDaDK.getValueAt(index, 4) < 14 && (id_hk == 1 || id_hk == 2) && col == 12){
            tbDSDaDK.setValueAt(!(boolean)tbDSDaDK.getValueAt(index, 12), index, 12);
            JOptionPane.showMessageDialog(null, "Số tín chỉ đăng ký phải >= 14 ");
            return;
        }

        if (col == 12) {

            if (checkDaLuu(index)) {
//                
                int dialogResult = JOptionPane.showConfirmDialog(null, "Bạn có muốn xóa?", "Confirmation", JOptionPane.YES_NO_OPTION);
                if (dialogResult == JOptionPane.YES_OPTION) {
//                    System.out.println("delete");
                    String maSV = dangNhap.getTaiKhoan();
                    String maMH = tbDSDaDK.getValueAt(index, 1).toString().strip();
                    int nhom = (int) tbDSDaDK.getValueAt(index, 3);
                    int tietBD = Integer.parseInt(tbDSDaDK.getValueAt(index, 9).toString().split("\n")[0]);
                    int thu = Integer.parseInt(tbDSDaDK.getValueAt(index, 8).toString().split("\n")[0]);
                    String ngayBD = tbDSDaDK.getValueAt(index, 6).toString().split("\n")[0];
                    String phong = tbDSDaDK.getValueAt(index, 10).toString().split("\n")[0];

                    new DangKyDAO().deleteDangKyBy(maSV, maMH, nhom, tietBD, thu, ngayBD, phong, this.time);
                    loadData(time);

                } else {

                    tbDSDaDK.setValueAt(!(boolean) tbDSDaDK.getValueAt(index, 12), index, 12);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Chưa lưu");
                tbDSDaDK.setValueAt(!(boolean) tbDSDaDK.getValueAt(index, 12), index, 12);
            }
        }


    }//GEN-LAST:event_tbDSDaDKMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLuu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable tbDSDK;
    private javax.swing.JTable tbDSDaDK;
    private javax.swing.JLabel txtThongBao;
    // End of variables declaration//GEN-END:variables

    public int checkTrungLich(int tietBDSL, int thuSL, String ngayBDSL, String ngayKTSL) {
        int tietBD;
        int thu;
        String ngayBD;
        String ngayKT;
        String phong;
        int index = -1;
        for (int i = 0; i < tbDSDaDK.getRowCount(); i++) {

            tietBD = Integer.parseInt(tbDSDaDK.getValueAt(i, 9).toString().split("\n")[0]);
            thu = Integer.parseInt(tbDSDaDK.getValueAt(i, 8).toString().split("\n")[0]);
            ngayBD = tbDSDaDK.getValueAt(i, 6).toString().split("\n")[0];
            ngayKT = tbDSDaDK.getValueAt(i, 7).toString().split("\n")[0];
            
            if(tietBDSL == tietBD && thuSL == thu
               && ngayBD.equalsIgnoreCase(ngayBDSL) && ngayKT.equalsIgnoreCase(ngayKTSL)
               ){
                    index = i;
                return index;
            }

        }

        return index;
    }

    public boolean checkDaLuu(int index) {
        String state = tbDSDaDK.getValueAt(index, 11).toString().strip();
        if (state.equalsIgnoreCase("Đã lưu")) {
            return true;
        }
        return false;
    }

    public void loadDSSVDK(int id) {
        monDangKy.clear();
        indexDangKy.clear();
        MultiLineTableCellRenderer renderer = new MultiLineTableCellRenderer();
        tbDSDaDK.setDefaultRenderer(Object.class, renderer);
        DefaultTableModel model = (DefaultTableModel) tbDSDaDK.getModel();
        model.setRowCount(0);

        ConnectionHelper connectionHelper = new ConnectionHelper();
        Connection connect = null;
        try {
            connect = connectionHelper.getConnection();
            String query = "{CALL DSLOPSVDK(?, ?)}";
            CallableStatement stmt = connect.prepareCall(query);

            stmt.setString(1, dangNhap.getTaiKhoan());
            stmt.setInt(2, id);

            ResultSet result = stmt.executeQuery();
            String Thu;
            String tiet;

            int i = 1;

            while (result.next()) {

                String pTH = result.getString("PTH") == null ? "" : result.getString("PTH");
                String ngayBDTH = result.getString("NBDTH") == null ? "" : result.getString("NBDTH");
                String ngayKTTH = result.getString("NKTTH") == null ? "" : result.getString("NKTTH");
                if (result.getInt("ThuTH") != 0) {
                    Thu = Integer.toString(result.getInt("ThuLT")) + "\n" + Integer.toString(result.getInt("ThuTH"));
                } else {
                    Thu = Integer.toString(result.getInt("ThuLT"));
                }

                if (result.getInt("ThuTH") != 0) {
                    tiet = Integer.toString(result.getInt("TBDLT")) + "\n" + Integer.toString(result.getInt("TBDTH"));
                } else {
                    tiet = Integer.toString(result.getInt("TBDLT"));
                }

                Object[] obj = {i++, result.getString("MaMH"), result.getString("TenMH"), result.getInt("MaNhom"), result.getInt("SoTinChi"),
                    result.getInt("GiaTien") * result.getInt("SoTinChi"),
                    result.getString("NBDLT") + "\n" + ngayBDTH,
                    result.getString("NKTLT") + " \n" + ngayKTTH,
                    Thu,
                    tiet,
                    result.getString("PLT") + "\n" + pTH, "Đã lưu", false};
                for (int j = 0; j < tbDSDK.getRowCount(); j++) {
                    if (checkRow(j, result.getString("MaMH"), result.getInt("MaNhom"), result.getInt("TBDLT"), result.getString("PLT"), result.getInt("ThuLT"))) {
                        tbDSDK.setValueAt(true, j, 13);
                        monDangKy.add(result.getString("MaMH"));
                        indexDangKy.add(j);
                    }
                }

                model.addRow(obj);

            }
            stmt.close();
            connect.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        model.fireTableDataChanged();
    }

    public int getTongSoTinChi() {
        int tongSoTinChi = 0;
        for (int i = 0; i < tbDSDaDK.getRowCount(); i++) {
            tongSoTinChi += (int) tbDSDaDK.getValueAt(i, 4);
        }
        return tongSoTinChi;
    }

    public boolean checkRow(int row, String maMH, int nhom, int tietBD, String Phong, int thu) {
        if (tbDSDK.getValueAt(row, 1).toString().split("\n")[0].equals(maMH)
                && Integer.parseInt(tbDSDK.getValueAt(row, 3).toString().split("\n")[0]) == nhom
                && Integer.parseInt((tbDSDK.getValueAt(row, 10).toString().split("\n")[0])) == thu
                && Integer.parseInt((tbDSDK.getValueAt(row, 11).toString().split("\n")[0])) == tietBD
                && tbDSDK.getValueAt(row, 12).toString().split("\n")[0].equals(Phong)) {

            return true;
        }
        return false;
    }

    public boolean checkTime() {
        
        String ngayBD = getPhien(time).getNgayBD().toString();
        String ngayKT = getPhien(time).getNgayKT().toString();
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        
        Date getCurrentDate = new Date();
        
        String current = dateFormat.format(getCurrentDate);

        int result1 = current.compareTo(ngayBD);
        int result2 = current.compareTo(ngayKT);
        
        if (result1 >= 0 && result2 <= 0) {
            return true;
        }

        return false;
    }
    
    public void thoiGianMoPhien(int id_cthknh) {
        Date ngayBD = getPhien(id_cthknh).getNgayBD();
        Date ngayKT = getPhien(id_cthknh).getNgayKT();
//        String ngayBD = ngayBD + "";

        txtThongBao.setText("");
        if(ngayBD == null){
             txtThongBao.setText("Thời gian đăng ký: chưa mở");
             return;
        }
         
     
        
        txtThongBao.setText("Thời gian đăng ký: " + ngayBD + " - " + ngayKT);
    }

    public void setStateLuu() {
        for (int i = 0; i < tbDSDaDK.getRowCount(); i++) {
            tbDSDaDK.setValueAt("Đã Lưu", i, 11);
            tbDSDaDK.setValueAt(false, i, 12);
        }
    }

//    public void fillComBoxHocKy() {
//        List<HocKy> listhocKy = new HocKyDAO().getListHocKy();
//        cbHK.removeAllItems();
////        cbHK.addItem("hoc ky");
//        for (HocKy e : listhocKy) {
//            cbHK.addItem(e.getHocKy());
//        }
//
//    }

//    public HocKy getModelHocKy() {
//        HocKy hocKy = new HocKy();
//        String tenHocKy = cbHK.getSelectedItem().toString().strip();
//        HocKyDAO hocKyDAO = new HocKyDAO();
//
//        hocKy = hocKyDAO.getHocKyByName(tenHocKy);
//
//        return hocKy;
//    }

//    public void fillComBoxNamHoc() {
//        List<NamHoc> listNH = new NamHocDAO().getListNamHoc();
//        cbNH.removeAllItems();
////        cbNH.addItem("Nam hoc");
//        for (NamHoc e : listNH) {
//            cbNH.addItem(e.getTenNamHoc());
//        }
//    }
//
//    public NamHoc getModelNamHoc() {
//
//        String tenNamHoc = cbNH.getSelectedItem().toString().strip();
//
//        NamHoc namHoc = new NamHocDAO().getNamHocByName(tenNamHoc);
//
////        NamHoc namHoc = new NamHocDAO().get
//        return namHoc;
//    }

    public CT_HocKy_NamHoc getModelCT_HocKy_NamHoc(int maHocKy, int maNamHoc) {

        CT_HocKy_NamHoc cT_HocKy_NamHoc = new CT_HocKy_NamHoc_DAO().getCT_HocKy_NamHocByNH_HK(maHocKy, maNamHoc);
        return cT_HocKy_NamHoc;
    }

    public CT_HocKy_NamHoc getCurrentHKNH() {
        CT_HocKy_NamHoc currentHKNH = new CT_HocKy_NamHoc_DAO().getCTHKNHCurrent();
        return currentHKNH;
    }
    
    public HocKy getCurrentHocKy() {
        HocKy curHocKy = new HocKyDAO().getCurrentHocKy(getCurrentHKNH().getMaHocKy());
        return curHocKy;
    }
    
    public NamHoc getCurrentNamHoc() {
        NamHoc curNamHoc = new NamHocDAO().getCurrentNamHoc(getCurrentHKNH().getMaNamHoc());
        return curNamHoc;
    }
    
    //Lay HK_NH Chuan bi dang ky
    public CT_HocKy_NamHoc getNextCurrentHKNH() {
        CT_HocKy_NamHoc nextCurrentHKNH = new CT_HocKy_NamHoc_DAO().getNextCTHKNHCurrent();
        return nextCurrentHKNH;
    }
    
    public HocKy getNextCurrentHocKy() {
        HocKy curHocKy = new HocKyDAO().getNextCurrentHocKy(getNextCurrentHKNH().getMaHocKy());
        return curHocKy;
    }
    
    public NamHoc getNextCurrentNamHoc() {
        NamHoc curNamHoc = new NamHocDAO().getNextCurrentNamHoc(getNextCurrentHKNH().getMaNamHoc());
        return curNamHoc;
    }
    

    

    public Phien getPhien(int id_cthknh) {
        Phien phien = new PhienDAO().getPhienByCTHKNH(id_cthknh);
        return phien;
    }

    public CT_Nhom getModelCTNByMaLopAndMaNhom(String maLop, int maNhom) {
        CT_Nhom ctn = new CT_NhomDAO().getCT_NhomByMaLopAndMaNhom(maLop, maNhom);
        return ctn;
    }

    public LopTinChi getModelLTCByMaMH(String mMH) {
        LopTinChi ltc = new LopTinChiDAO().getLopTicChiByMaMH(mMH);
        return ltc;

    }

    public void setCurrentHKNHComBo() {
        String tenHocKy = getNextCurrentHocKy().getHocKy();
        String tenNamHoc = getNextCurrentNamHoc().getTenNamHoc();
    }

    public void initTable() {
        tbDSDK.getColumnModel().getColumn(0).setPreferredWidth(40);
        tbDSDK.getColumnModel().getColumn(1).setPreferredWidth(70);
        tbDSDK.getColumnModel().getColumn(2).setPreferredWidth(170);
        tbDSDK.getColumnModel().getColumn(3).setPreferredWidth(50);
//
//        tbDSDK.getColumnModel().getColumn(13).setCellRenderer(new CheckboxRenderer());
//        tbDSDK.getColumnModel().getColumn(13).setCellEditor(new CheckboxEditor());

        tbDSDaDK.getColumnModel().getColumn(0).setPreferredWidth(40);
        tbDSDaDK.getColumnModel().getColumn(1).setPreferredWidth(70);
        tbDSDaDK.getColumnModel().getColumn(2).setPreferredWidth(170);
        tbDSDaDK.getColumnModel().getColumn(3).setPreferredWidth(50);

    }

    public int getCurrentIDHKNH() {
        return this.currentIDCTHKNH;
    }
    
    public int getTime(){
        return this.time;
    }

}

class MultiLineTableCellRenderer extends JTextArea implements TableCellRenderer {

    public MultiLineTableCellRenderer() {
        setLineWrap(true);
        setWrapStyleWord(true);
        setOpaque(true);
    }

    public Component getTableCellRendererComponent(JTable table, Object value,
            boolean isSelected, boolean hasFocus, int row, int column) {
        setText((value == null) ? "" : value.toString());
        setSize(table.getColumnModel().getColumn(column).getWidth(),
                getPreferredSize().height);
        if (isSelected) {
            setBackground(table.getSelectionBackground());
            setForeground(table.getSelectionForeground());
        } else {
            setBackground(table.getBackground());
            setForeground(table.getForeground());
        }
        return this;
    }

}
